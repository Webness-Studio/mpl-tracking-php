<?php
/**
 * RegisteredApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WebnessStudio\MPL\Tracking
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PULL Nyomkövetés 1 csomagra / PULL Tracking only for 1 item
 *
 * <div style='width: 100%;margin: 0px auto;'>  <div style='float: left; width:47%'>  <h1>PULL Nyomkövetés</h1>  <h2>- csomagonkénti nyomkövetés -</h2>  <div>&nbsp;</div>  <p>Csomagok egyesével történő lekérdezése szolgáló API. Célja, hogy a csomagok utolsó tranzakciójáról, vagy akár a teljes életútjáról szinkron módon információt adjon (PULL).</p>  <p>(Ha olyan nyomkövetést keres, aminél beküldhető, hogy pontosan mely csomagok legutolsó eseményeire kíváncsi, akkor arra egy másik API szolgáltatásunk alkalmas: Több csomagos pull nyomkövetés.)</p>  <p>(Ha olyan nyomkövetést keres, ami csomagazonosítók beküldése nélkül is alkalmas az információk fogadására, akkor arra egy másik API szolgáltatásunk alkalmas: Feliratkozás push nyomkövetésre.)</p>  <p>Erről az API-ról itt talál részletes leírást: <a href='https://devportal.posta.hu/sites/default/files/2020-11/MPLAPI_nyomkovetes_leiras_1.pdf'>MPLAPI_nyomkovetes_leiras_1.pdf</a></p>  <p>A végpontok működését leíró dokumentációt lentebb találja.</p>  </div>  <div style='float:right; width:47%'>  <h1>PULL TRACKING</h1>  <h2>- tracking only for 1 item -</h2>  <div>&nbsp;</div>  <p>An API enabling single tracking only for 1 parcel. Its purpose is to provide synchronous information about the last or all transactions of a given parcel (polling).</p>  <p>(If you're looking for a tracking service for large volumes of parcels, you can use our other API service, called “Pull Tracking up to 500 items”.)</p>  <p>(If you're looking for a tracking service which can be performed without submitting any tracking number, you can use our other API service, called “Push Tracking subscription”.)</p>  <p>Documentation, describing how this API work, can be found here: <a href='https://devportal.posta.hu/sites/default/files/2020-11/MPLAPI_tracking_technical_description_3.pdf'>MPLAPI_tracking_technical_description_3.pdf</a></p>  <p>Documentation describing how the endpoints work can be found below.</p>  </div>  </div>  <div style='clear: both;'>    ### Az API a következő URL-eken érhető el: / This API can be accessed at the following URLs: ###  <div><table><tr><td><b>Környezet / Environment</b></td><td><b>API URL</b></td><td><b>OAuth2 Token URL</b></td></tr><tr><td>Sandbox</td><td>https://sandbox.api.posta.hu/v2/nyomkovetes</td><td>https://sandbox.api.posta.hu/oauth2/token</td></tr><tr><td>Production</td><td>https://core.api.posta.hu/v2/nyomkovetes</td><td>https://core.api.posta.hu/oauth2/token</td></tr></table>  Az API ezen az oldalon a Sandbox környezetben tesztelhető. / You can test the API on this page in the Sandbox environment.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebnessStudio\MPL\Tracking\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WebnessStudio\MPL\Tracking\ApiException;
use WebnessStudio\MPL\Tracking\Configuration;
use WebnessStudio\MPL\Tracking\HeaderSelector;
use WebnessStudio\MPL\Tracking\ObjectSerializer;

/**
 * RegisteredApi Class Doc Comment
 *
 * @category Class
 * @package  WebnessStudio\MPL\Tracking
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RegisteredApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'registered' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation registered
     *
     * Maximum 1 küldeményazonosító beküldése. A korábban beküldött küldeményazonosítót nem javasoljuk újra beküldeni négy órán belül. A beküldött paramétertől (last, all) függően az információ előállítása több másodpercet is igénybe vehet. A kapott adatban a legfontosabb mező a C9 (utolsó esemény), melyről a Dokumentáció menüben részletesen tájékozódhat. / Submit only 1 mail item IDs. We do not recommend resubmitting a previously submitted mail item ID within four hours. Depending on the parameter of request (last, all), it may take several seconds to response the information. The most important field in the received data is the C9 (last event), about which detailed explanations can be found in the Documentation menu.
     *
     * @param  \WebnessStudio\MPL\Tracking\Model\Request $request request (required)
     * @param  string $x_request_id The unique request ID (optional)
     * @param  string $x_correlation_id The unique correlation ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registered'] to see the possible values for this operation
     *
     * @throws \WebnessStudio\MPL\Tracking\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebnessStudio\MPL\Tracking\Model\RegisteredResponse|\WebnessStudio\MPL\Tracking\Model\Registered400Response|\WebnessStudio\MPL\Tracking\Model\Registered400Response|\WebnessStudio\MPL\Tracking\Model\Registered400Response|\WebnessStudio\MPL\Tracking\Model\Registered400Response|\WebnessStudio\MPL\Tracking\Model\Registered400Response|\WebnessStudio\MPL\Tracking\Model\Registered400Response|\WebnessStudio\MPL\Tracking\Model\Registered400Response
     */
    public function registered($request, $x_request_id = null, $x_correlation_id = null, string $contentType = self::contentTypes['registered'][0])
    {
        list($response) = $this->registeredWithHttpInfo($request, $x_request_id, $x_correlation_id, $contentType);
        return $response;
    }

    /**
     * Operation registeredWithHttpInfo
     *
     * Maximum 1 küldeményazonosító beküldése. A korábban beküldött küldeményazonosítót nem javasoljuk újra beküldeni négy órán belül. A beküldött paramétertől (last, all) függően az információ előállítása több másodpercet is igénybe vehet. A kapott adatban a legfontosabb mező a C9 (utolsó esemény), melyről a Dokumentáció menüben részletesen tájékozódhat. / Submit only 1 mail item IDs. We do not recommend resubmitting a previously submitted mail item ID within four hours. Depending on the parameter of request (last, all), it may take several seconds to response the information. The most important field in the received data is the C9 (last event), about which detailed explanations can be found in the Documentation menu.
     *
     * @param  \WebnessStudio\MPL\Tracking\Model\Request $request (required)
     * @param  string $x_request_id The unique request ID (optional)
     * @param  string $x_correlation_id The unique correlation ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registered'] to see the possible values for this operation
     *
     * @throws \WebnessStudio\MPL\Tracking\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebnessStudio\MPL\Tracking\Model\RegisteredResponse|\WebnessStudio\MPL\Tracking\Model\Registered400Response|\WebnessStudio\MPL\Tracking\Model\Registered400Response|\WebnessStudio\MPL\Tracking\Model\Registered400Response|\WebnessStudio\MPL\Tracking\Model\Registered400Response|\WebnessStudio\MPL\Tracking\Model\Registered400Response|\WebnessStudio\MPL\Tracking\Model\Registered400Response|\WebnessStudio\MPL\Tracking\Model\Registered400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function registeredWithHttpInfo($request, $x_request_id = null, $x_correlation_id = null, string $contentType = self::contentTypes['registered'][0])
    {
        $request = $this->registeredRequest($request, $x_request_id, $x_correlation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebnessStudio\MPL\Tracking\Model\RegisteredResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebnessStudio\MPL\Tracking\Model\RegisteredResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebnessStudio\MPL\Tracking\Model\RegisteredResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebnessStudio\MPL\Tracking\Model\Registered400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebnessStudio\MPL\Tracking\Model\Registered400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebnessStudio\MPL\Tracking\Model\Registered400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebnessStudio\MPL\Tracking\Model\Registered400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebnessStudio\MPL\Tracking\Model\Registered400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebnessStudio\MPL\Tracking\Model\Registered400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebnessStudio\MPL\Tracking\Model\Registered400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebnessStudio\MPL\Tracking\Model\Registered400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebnessStudio\MPL\Tracking\Model\RegisteredResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebnessStudio\MPL\Tracking\Model\RegisteredResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebnessStudio\MPL\Tracking\Model\Registered400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebnessStudio\MPL\Tracking\Model\Registered400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebnessStudio\MPL\Tracking\Model\Registered400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebnessStudio\MPL\Tracking\Model\Registered400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebnessStudio\MPL\Tracking\Model\Registered400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebnessStudio\MPL\Tracking\Model\Registered400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebnessStudio\MPL\Tracking\Model\Registered400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation registeredAsync
     *
     * Maximum 1 küldeményazonosító beküldése. A korábban beküldött küldeményazonosítót nem javasoljuk újra beküldeni négy órán belül. A beküldött paramétertől (last, all) függően az információ előállítása több másodpercet is igénybe vehet. A kapott adatban a legfontosabb mező a C9 (utolsó esemény), melyről a Dokumentáció menüben részletesen tájékozódhat. / Submit only 1 mail item IDs. We do not recommend resubmitting a previously submitted mail item ID within four hours. Depending on the parameter of request (last, all), it may take several seconds to response the information. The most important field in the received data is the C9 (last event), about which detailed explanations can be found in the Documentation menu.
     *
     * @param  \WebnessStudio\MPL\Tracking\Model\Request $request (required)
     * @param  string $x_request_id The unique request ID (optional)
     * @param  string $x_correlation_id The unique correlation ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registered'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registeredAsync($request, $x_request_id = null, $x_correlation_id = null, string $contentType = self::contentTypes['registered'][0])
    {
        return $this->registeredAsyncWithHttpInfo($request, $x_request_id, $x_correlation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation registeredAsyncWithHttpInfo
     *
     * Maximum 1 küldeményazonosító beküldése. A korábban beküldött küldeményazonosítót nem javasoljuk újra beküldeni négy órán belül. A beküldött paramétertől (last, all) függően az információ előállítása több másodpercet is igénybe vehet. A kapott adatban a legfontosabb mező a C9 (utolsó esemény), melyről a Dokumentáció menüben részletesen tájékozódhat. / Submit only 1 mail item IDs. We do not recommend resubmitting a previously submitted mail item ID within four hours. Depending on the parameter of request (last, all), it may take several seconds to response the information. The most important field in the received data is the C9 (last event), about which detailed explanations can be found in the Documentation menu.
     *
     * @param  \WebnessStudio\MPL\Tracking\Model\Request $request (required)
     * @param  string $x_request_id The unique request ID (optional)
     * @param  string $x_correlation_id The unique correlation ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registered'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registeredAsyncWithHttpInfo($request, $x_request_id = null, $x_correlation_id = null, string $contentType = self::contentTypes['registered'][0])
    {
        $returnType = '\WebnessStudio\MPL\Tracking\Model\RegisteredResponse';
        $request = $this->registeredRequest($request, $x_request_id, $x_correlation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'registered'
     *
     * @param  \WebnessStudio\MPL\Tracking\Model\Request $request (required)
     * @param  string $x_request_id The unique request ID (optional)
     * @param  string $x_correlation_id The unique correlation ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registered'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function registeredRequest($request, $x_request_id = null, $x_correlation_id = null, string $contentType = self::contentTypes['registered'][0])
    {

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling registered'
            );
        }




        $resourcePath = '/registered';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_request_id !== null) {
            $headerParams['X-Request-Id'] = ObjectSerializer::toHeaderValue($x_request_id);
        }
        // header params
        if ($x_correlation_id !== null) {
            $headerParams['X-Correlation-Id'] = ObjectSerializer::toHeaderValue($x_correlation_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
