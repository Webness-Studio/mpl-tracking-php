<?php
/**
 * GuestResponseTrackAndTraceInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebnessStudio\MPL\Tracking
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PULL Nyomkövetés 1 csomagra / PULL Tracking only for 1 item
 *
 * <div style='width: 100%;margin: 0px auto;'>  <div style='float: left; width:47%'>  <h1>PULL Nyomkövetés</h1>  <h2>- csomagonkénti nyomkövetés -</h2>  <div>&nbsp;</div>  <p>Csomagok egyesével történő lekérdezése szolgáló API. Célja, hogy a csomagok utolsó tranzakciójáról, vagy akár a teljes életútjáról szinkron módon információt adjon (PULL).</p>  <p>(Ha olyan nyomkövetést keres, aminél beküldhető, hogy pontosan mely csomagok legutolsó eseményeire kíváncsi, akkor arra egy másik API szolgáltatásunk alkalmas: Több csomagos pull nyomkövetés.)</p>  <p>(Ha olyan nyomkövetést keres, ami csomagazonosítók beküldése nélkül is alkalmas az információk fogadására, akkor arra egy másik API szolgáltatásunk alkalmas: Feliratkozás push nyomkövetésre.)</p>  <p>Erről az API-ról itt talál részletes leírást: <a href='https://devportal.posta.hu/sites/default/files/2020-11/MPLAPI_nyomkovetes_leiras_1.pdf'>MPLAPI_nyomkovetes_leiras_1.pdf</a></p>  <p>A végpontok működését leíró dokumentációt lentebb találja.</p>  </div>  <div style='float:right; width:47%'>  <h1>PULL TRACKING</h1>  <h2>- tracking only for 1 item -</h2>  <div>&nbsp;</div>  <p>An API enabling single tracking only for 1 parcel. Its purpose is to provide synchronous information about the last or all transactions of a given parcel (polling).</p>  <p>(If you're looking for a tracking service for large volumes of parcels, you can use our other API service, called “Pull Tracking up to 500 items”.)</p>  <p>(If you're looking for a tracking service which can be performed without submitting any tracking number, you can use our other API service, called “Push Tracking subscription”.)</p>  <p>Documentation, describing how this API work, can be found here: <a href='https://devportal.posta.hu/sites/default/files/2020-11/MPLAPI_tracking_technical_description_3.pdf'>MPLAPI_tracking_technical_description_3.pdf</a></p>  <p>Documentation describing how the endpoints work can be found below.</p>  </div>  </div>  <div style='clear: both;'>    ### Az API a következő URL-eken érhető el: / This API can be accessed at the following URLs: ###  <div><table><tr><td><b>Környezet / Environment</b></td><td><b>API URL</b></td><td><b>OAuth2 Token URL</b></td></tr><tr><td>Sandbox</td><td>https://sandbox.api.posta.hu/v2/nyomkovetes</td><td>https://sandbox.api.posta.hu/oauth2/token</td></tr><tr><td>Production</td><td>https://core.api.posta.hu/v2/nyomkovetes</td><td>https://core.api.posta.hu/oauth2/token</td></tr></table>  Az API ezen az oldalon a Sandbox környezetben tesztelhető. / You can test the API on this page in the Sandbox environment.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebnessStudio\MPL\Tracking\Model;

use \ArrayAccess;
use \WebnessStudio\MPL\Tracking\ObjectSerializer;

/**
 * GuestResponseTrackAndTraceInner Class Doc Comment
 *
 * @category Class
 * @package  WebnessStudio\MPL\Tracking
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GuestResponseTrackAndTraceInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GuestResponse_trackAndTrace_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'c0' => 'string',
        'c1' => 'string',
        'c2' => 'string',
        'c4' => 'string',
        'c6' => 'string',
        'c8' => 'string',
        'c9' => 'string',
        'c10' => 'string',
        'c11' => 'string',
        'c12' => 'string',
        'c13' => 'string',
        'c38' => 'string',
        'c39' => 'string',
        'c43' => 'string',
        'c49' => 'string',
        'c53' => 'string',
        'c55' => 'string',
        'c56' => 'string',
        'c57' => 'string',
        'c59' => 'string',
        'c60' => 'string',
        'c61' => 'string',
        'c63' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'c0' => null,
        'c1' => null,
        'c2' => null,
        'c4' => null,
        'c6' => null,
        'c8' => null,
        'c9' => null,
        'c10' => null,
        'c11' => null,
        'c12' => null,
        'c13' => null,
        'c38' => null,
        'c39' => null,
        'c43' => null,
        'c49' => null,
        'c53' => null,
        'c55' => null,
        'c56' => null,
        'c57' => null,
        'c59' => null,
        'c60' => null,
        'c61' => null,
        'c63' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'c0' => false,
        'c1' => false,
        'c2' => false,
        'c4' => false,
        'c6' => false,
        'c8' => false,
        'c9' => false,
        'c10' => false,
        'c11' => false,
        'c12' => false,
        'c13' => false,
        'c38' => false,
        'c39' => false,
        'c43' => false,
        'c49' => false,
        'c53' => false,
        'c55' => false,
        'c56' => false,
        'c57' => false,
        'c59' => false,
        'c60' => false,
        'c61' => false,
        'c63' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c0' => 'c0',
        'c1' => 'c1',
        'c2' => 'c2',
        'c4' => 'c4',
        'c6' => 'c6',
        'c8' => 'c8',
        'c9' => 'c9',
        'c10' => 'c10',
        'c11' => 'c11',
        'c12' => 'c12',
        'c13' => 'c13',
        'c38' => 'c38',
        'c39' => 'c39',
        'c43' => 'c43',
        'c49' => 'c49',
        'c53' => 'c53',
        'c55' => 'c55',
        'c56' => 'c56',
        'c57' => 'c57',
        'c59' => 'c59',
        'c60' => 'c60',
        'c61' => 'c61',
        'c63' => 'c63'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c0' => 'setC0',
        'c1' => 'setC1',
        'c2' => 'setC2',
        'c4' => 'setC4',
        'c6' => 'setC6',
        'c8' => 'setC8',
        'c9' => 'setC9',
        'c10' => 'setC10',
        'c11' => 'setC11',
        'c12' => 'setC12',
        'c13' => 'setC13',
        'c38' => 'setC38',
        'c39' => 'setC39',
        'c43' => 'setC43',
        'c49' => 'setC49',
        'c53' => 'setC53',
        'c55' => 'setC55',
        'c56' => 'setC56',
        'c57' => 'setC57',
        'c59' => 'setC59',
        'c60' => 'setC60',
        'c61' => 'setC61',
        'c63' => 'setC63'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c0' => 'getC0',
        'c1' => 'getC1',
        'c2' => 'getC2',
        'c4' => 'getC4',
        'c6' => 'getC6',
        'c8' => 'getC8',
        'c9' => 'getC9',
        'c10' => 'getC10',
        'c11' => 'getC11',
        'c12' => 'getC12',
        'c13' => 'getC13',
        'c38' => 'getC38',
        'c39' => 'getC39',
        'c43' => 'getC43',
        'c49' => 'getC49',
        'c53' => 'getC53',
        'c55' => 'getC55',
        'c56' => 'getC56',
        'c57' => 'getC57',
        'c59' => 'getC59',
        'c60' => 'getC60',
        'c61' => 'getC61',
        'c63' => 'getC63'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('c0', $data ?? [], null);
        $this->setIfExists('c1', $data ?? [], null);
        $this->setIfExists('c2', $data ?? [], null);
        $this->setIfExists('c4', $data ?? [], null);
        $this->setIfExists('c6', $data ?? [], null);
        $this->setIfExists('c8', $data ?? [], null);
        $this->setIfExists('c9', $data ?? [], null);
        $this->setIfExists('c10', $data ?? [], null);
        $this->setIfExists('c11', $data ?? [], null);
        $this->setIfExists('c12', $data ?? [], null);
        $this->setIfExists('c13', $data ?? [], null);
        $this->setIfExists('c38', $data ?? [], null);
        $this->setIfExists('c39', $data ?? [], null);
        $this->setIfExists('c43', $data ?? [], null);
        $this->setIfExists('c49', $data ?? [], null);
        $this->setIfExists('c53', $data ?? [], null);
        $this->setIfExists('c55', $data ?? [], null);
        $this->setIfExists('c56', $data ?? [], null);
        $this->setIfExists('c57', $data ?? [], null);
        $this->setIfExists('c59', $data ?? [], null);
        $this->setIfExists('c60', $data ?? [], null);
        $this->setIfExists('c61', $data ?? [], null);
        $this->setIfExists('c63', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c0
     *
     * @return string|null
     */
    public function getC0()
    {
        return $this->container['c0'];
    }

    /**
     * Sets c0
     *
     * @param string|null $c0 System ID
     *
     * @return self
     */
    public function setC0($c0)
    {
        if (is_null($c0)) {
            throw new \InvalidArgumentException('non-nullable c0 cannot be null');
        }
        $this->container['c0'] = $c0;

        return $this;
    }

    /**
     * Gets c1
     *
     * @return string|null
     */
    public function getC1()
    {
        return $this->container['c1'];
    }

    /**
     * Sets c1
     *
     * @param string|null $c1 Consignment ID
     *
     * @return self
     */
    public function setC1($c1)
    {
        if (is_null($c1)) {
            throw new \InvalidArgumentException('non-nullable c1 cannot be null');
        }
        $this->container['c1'] = $c1;

        return $this;
    }

    /**
     * Gets c2
     *
     * @return string|null
     */
    public function getC2()
    {
        return $this->container['c2'];
    }

    /**
     * Sets c2
     *
     * @param string|null $c2 c2
     *
     * @return self
     */
    public function setC2($c2)
    {
        if (is_null($c2)) {
            throw new \InvalidArgumentException('non-nullable c2 cannot be null');
        }
        $this->container['c2'] = $c2;

        return $this;
    }

    /**
     * Gets c4
     *
     * @return string|null
     */
    public function getC4()
    {
        return $this->container['c4'];
    }

    /**
     * Sets c4
     *
     * @param string|null $c4 c4
     *
     * @return self
     */
    public function setC4($c4)
    {
        if (is_null($c4)) {
            throw new \InvalidArgumentException('non-nullable c4 cannot be null');
        }
        $this->container['c4'] = $c4;

        return $this;
    }

    /**
     * Gets c6
     *
     * @return string|null
     */
    public function getC6()
    {
        return $this->container['c6'];
    }

    /**
     * Sets c6
     *
     * @param string|null $c6 c6
     *
     * @return self
     */
    public function setC6($c6)
    {
        if (is_null($c6)) {
            throw new \InvalidArgumentException('non-nullable c6 cannot be null');
        }
        $this->container['c6'] = $c6;

        return $this;
    }

    /**
     * Gets c8
     *
     * @return string|null
     */
    public function getC8()
    {
        return $this->container['c8'];
    }

    /**
     * Sets c8
     *
     * @param string|null $c8 c8
     *
     * @return self
     */
    public function setC8($c8)
    {
        if (is_null($c8)) {
            throw new \InvalidArgumentException('non-nullable c8 cannot be null');
        }
        $this->container['c8'] = $c8;

        return $this;
    }

    /**
     * Gets c9
     *
     * @return string|null
     */
    public function getC9()
    {
        return $this->container['c9'];
    }

    /**
     * Sets c9
     *
     * @param string|null $c9 c9
     *
     * @return self
     */
    public function setC9($c9)
    {
        if (is_null($c9)) {
            throw new \InvalidArgumentException('non-nullable c9 cannot be null');
        }
        $this->container['c9'] = $c9;

        return $this;
    }

    /**
     * Gets c10
     *
     * @return string|null
     */
    public function getC10()
    {
        return $this->container['c10'];
    }

    /**
     * Sets c10
     *
     * @param string|null $c10 c10
     *
     * @return self
     */
    public function setC10($c10)
    {
        if (is_null($c10)) {
            throw new \InvalidArgumentException('non-nullable c10 cannot be null');
        }
        $this->container['c10'] = $c10;

        return $this;
    }

    /**
     * Gets c11
     *
     * @return string|null
     */
    public function getC11()
    {
        return $this->container['c11'];
    }

    /**
     * Sets c11
     *
     * @param string|null $c11 c11
     *
     * @return self
     */
    public function setC11($c11)
    {
        if (is_null($c11)) {
            throw new \InvalidArgumentException('non-nullable c11 cannot be null');
        }
        $this->container['c11'] = $c11;

        return $this;
    }

    /**
     * Gets c12
     *
     * @return string|null
     */
    public function getC12()
    {
        return $this->container['c12'];
    }

    /**
     * Sets c12
     *
     * @param string|null $c12 c12
     *
     * @return self
     */
    public function setC12($c12)
    {
        if (is_null($c12)) {
            throw new \InvalidArgumentException('non-nullable c12 cannot be null');
        }
        $this->container['c12'] = $c12;

        return $this;
    }

    /**
     * Gets c13
     *
     * @return string|null
     */
    public function getC13()
    {
        return $this->container['c13'];
    }

    /**
     * Sets c13
     *
     * @param string|null $c13 c13
     *
     * @return self
     */
    public function setC13($c13)
    {
        if (is_null($c13)) {
            throw new \InvalidArgumentException('non-nullable c13 cannot be null');
        }
        $this->container['c13'] = $c13;

        return $this;
    }

    /**
     * Gets c38
     *
     * @return string|null
     */
    public function getC38()
    {
        return $this->container['c38'];
    }

    /**
     * Sets c38
     *
     * @param string|null $c38 c38
     *
     * @return self
     */
    public function setC38($c38)
    {
        if (is_null($c38)) {
            throw new \InvalidArgumentException('non-nullable c38 cannot be null');
        }
        $this->container['c38'] = $c38;

        return $this;
    }

    /**
     * Gets c39
     *
     * @return string|null
     */
    public function getC39()
    {
        return $this->container['c39'];
    }

    /**
     * Sets c39
     *
     * @param string|null $c39 c39
     *
     * @return self
     */
    public function setC39($c39)
    {
        if (is_null($c39)) {
            throw new \InvalidArgumentException('non-nullable c39 cannot be null');
        }
        $this->container['c39'] = $c39;

        return $this;
    }

    /**
     * Gets c43
     *
     * @return string|null
     */
    public function getC43()
    {
        return $this->container['c43'];
    }

    /**
     * Sets c43
     *
     * @param string|null $c43 c43
     *
     * @return self
     */
    public function setC43($c43)
    {
        if (is_null($c43)) {
            throw new \InvalidArgumentException('non-nullable c43 cannot be null');
        }
        $this->container['c43'] = $c43;

        return $this;
    }

    /**
     * Gets c49
     *
     * @return string|null
     */
    public function getC49()
    {
        return $this->container['c49'];
    }

    /**
     * Sets c49
     *
     * @param string|null $c49 c49
     *
     * @return self
     */
    public function setC49($c49)
    {
        if (is_null($c49)) {
            throw new \InvalidArgumentException('non-nullable c49 cannot be null');
        }
        $this->container['c49'] = $c49;

        return $this;
    }

    /**
     * Gets c53
     *
     * @return string|null
     */
    public function getC53()
    {
        return $this->container['c53'];
    }

    /**
     * Sets c53
     *
     * @param string|null $c53 c53
     *
     * @return self
     */
    public function setC53($c53)
    {
        if (is_null($c53)) {
            throw new \InvalidArgumentException('non-nullable c53 cannot be null');
        }
        $this->container['c53'] = $c53;

        return $this;
    }

    /**
     * Gets c55
     *
     * @return string|null
     */
    public function getC55()
    {
        return $this->container['c55'];
    }

    /**
     * Sets c55
     *
     * @param string|null $c55 c55
     *
     * @return self
     */
    public function setC55($c55)
    {
        if (is_null($c55)) {
            throw new \InvalidArgumentException('non-nullable c55 cannot be null');
        }
        $this->container['c55'] = $c55;

        return $this;
    }

    /**
     * Gets c56
     *
     * @return string|null
     */
    public function getC56()
    {
        return $this->container['c56'];
    }

    /**
     * Sets c56
     *
     * @param string|null $c56 c56
     *
     * @return self
     */
    public function setC56($c56)
    {
        if (is_null($c56)) {
            throw new \InvalidArgumentException('non-nullable c56 cannot be null');
        }
        $this->container['c56'] = $c56;

        return $this;
    }

    /**
     * Gets c57
     *
     * @return string|null
     */
    public function getC57()
    {
        return $this->container['c57'];
    }

    /**
     * Sets c57
     *
     * @param string|null $c57 c57
     *
     * @return self
     */
    public function setC57($c57)
    {
        if (is_null($c57)) {
            throw new \InvalidArgumentException('non-nullable c57 cannot be null');
        }
        $this->container['c57'] = $c57;

        return $this;
    }

    /**
     * Gets c59
     *
     * @return string|null
     */
    public function getC59()
    {
        return $this->container['c59'];
    }

    /**
     * Sets c59
     *
     * @param string|null $c59 c59
     *
     * @return self
     */
    public function setC59($c59)
    {
        if (is_null($c59)) {
            throw new \InvalidArgumentException('non-nullable c59 cannot be null');
        }
        $this->container['c59'] = $c59;

        return $this;
    }

    /**
     * Gets c60
     *
     * @return string|null
     */
    public function getC60()
    {
        return $this->container['c60'];
    }

    /**
     * Sets c60
     *
     * @param string|null $c60 c60
     *
     * @return self
     */
    public function setC60($c60)
    {
        if (is_null($c60)) {
            throw new \InvalidArgumentException('non-nullable c60 cannot be null');
        }
        $this->container['c60'] = $c60;

        return $this;
    }

    /**
     * Gets c61
     *
     * @return string|null
     */
    public function getC61()
    {
        return $this->container['c61'];
    }

    /**
     * Sets c61
     *
     * @param string|null $c61 c61
     *
     * @return self
     */
    public function setC61($c61)
    {
        if (is_null($c61)) {
            throw new \InvalidArgumentException('non-nullable c61 cannot be null');
        }
        $this->container['c61'] = $c61;

        return $this;
    }

    /**
     * Gets c63
     *
     * @return string|null
     */
    public function getC63()
    {
        return $this->container['c63'];
    }

    /**
     * Sets c63
     *
     * @param string|null $c63 c63
     *
     * @return self
     */
    public function setC63($c63)
    {
        if (is_null($c63)) {
            throw new \InvalidArgumentException('non-nullable c63 cannot be null');
        }
        $this->container['c63'] = $c63;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


